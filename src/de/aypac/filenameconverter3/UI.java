/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.aypac.filenameconverter3;

import de.aypac.filenameconverter3.*;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Ren√©
 */
public class UI extends javax.swing.JFrame {

    public Filter[] filters = new Filter[1];
    private final String VERSION = "3.0c";
    final String CHECK_FOR_UPDATE_URL = "http://aypac.de/musicconverter2.0/update.php?v=" + VERSION;
    private String HELP_PAGE = "http://aypac.de/musicconverter2.0/help/";

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        this.filters[0] = new Filter("_", " ", false, false);
        this.refreshFilterlist();
        this.filterList.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterSettingsDialog = new javax.swing.JFrame();
        replaceField = new javax.swing.JTextField();
        byField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        caseSensitiveCheckbox = new javax.swing.JCheckBox();
        regexCheckbox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        filterManagerDialog = new javax.swing.JFrame();
        scrollPane2 = new javax.swing.JScrollPane();
        filterlistList = new javax.swing.JList();
        loadFilterlistButton = new javax.swing.JButton();
        exportFilterlistButton = new javax.swing.JButton();
        importFilterlistButton = new javax.swing.JButton();
        saveFilterlistButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        saveFilterlistDialog = new javax.swing.JFrame();
        filterlistNameField = new javax.swing.JTextField();
        filterlistSaveLabel1 = new javax.swing.JLabel();
        confirmSaveButton = new javax.swing.JButton();
        filterlistSaveLabel2 = new javax.swing.JLabel();
        importFileChooser = new javax.swing.JFileChooser();
        applyFileChooser = new javax.swing.JFileChooser();
        infoDialog = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        filterList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        selectedFilterLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        filtermanagerMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        informationMenu = new javax.swing.JMenu();
        updatesMenu = new javax.swing.JMenu();

        filterSettingsDialog.setTitle("Edit / Add Filter");
        filterSettingsDialog.setAlwaysOnTop(true);
        filterSettingsDialog.setMinimumSize(new java.awt.Dimension(430, 170));
        filterSettingsDialog.setResizable(false);
        filterSettingsDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                filterSettingsDialogWindowClosed(evt);
            }
        });

        jLabel1.setText("Replace");

        jLabel2.setText("By");

        caseSensitiveCheckbox.setSelected(true);
        caseSensitiveCheckbox.setText("Case-Sensitive");
        caseSensitiveCheckbox.setToolTipText("Comes with the next version.\nMeanwhile use Regex and (?i)");
        caseSensitiveCheckbox.setEnabled(false);
        caseSensitiveCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caseSensitiveCheckboxActionPerformed(evt);
            }
        });

        regexCheckbox.setText("Regex");

        jButton1.setText("Change it!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Never mind.");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterSettingsDialogLayout = new javax.swing.GroupLayout(filterSettingsDialog.getContentPane());
        filterSettingsDialog.getContentPane().setLayout(filterSettingsDialogLayout);
        filterSettingsDialogLayout.setHorizontalGroup(
            filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                        .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(replaceField)
                            .addComponent(byField)))
                    .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                        .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                                .addComponent(caseSensitiveCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(regexCheckbox)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 262, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                        .addContainerGap())))
        );
        filterSettingsDialogLayout.setVerticalGroup(
            filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(replaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(byField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caseSensitiveCheckbox)
                    .addComponent(regexCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(filterSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        filterManagerDialog.setTitle("Filterlist Manager");
        filterManagerDialog.setAlwaysOnTop(true);
        filterManagerDialog.setMinimumSize(new java.awt.Dimension(340, 275));

        scrollPane2.setViewportView(filterlistList);

        loadFilterlistButton.setText("Load");
        loadFilterlistButton.setToolTipText("Loads the Filterlist seleted on the left.");
        loadFilterlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFilterlistButtonActionPerformed(evt);
            }
        });

        exportFilterlistButton.setText("Export");
        exportFilterlistButton.setToolTipText("Exports a Filterlists on this Computer to a file (e.g. to send someone else).");
        exportFilterlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFilterlistButtonActionPerformed(evt);
            }
        });

        importFilterlistButton.setText("Import");
        importFilterlistButton.setToolTipText("Imports a file to the Filterlists of this Computer");
        importFilterlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFilterlistButtonActionPerformed(evt);
            }
        });

        saveFilterlistButton.setText("Save");
        saveFilterlistButton.setToolTipText("Saves the currently open Filterlist.");
        saveFilterlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFilterlistButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Filterlists on this Computer");

        jButton5.setText("Delete");
        jButton5.setToolTipText("Deletes the Filterlist seleted on the left.");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterManagerDialogLayout = new javax.swing.GroupLayout(filterManagerDialog.getContentPane());
        filterManagerDialog.getContentPane().setLayout(filterManagerDialogLayout);
        filterManagerDialogLayout.setHorizontalGroup(
            filterManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterManagerDialogLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 87, Short.MAX_VALUE))
                    .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportFilterlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(importFilterlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveFilterlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadFilterlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        filterManagerDialogLayout.setVerticalGroup(
            filterManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(filterManagerDialogLayout.createSequentialGroup()
                .addGroup(filterManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(filterManagerDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(loadFilterlistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(saveFilterlistButton)
                        .addGap(18, 18, 18)
                        .addComponent(importFilterlistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportFilterlistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(filterManagerDialogLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane2)))
                .addContainerGap())
        );

        saveFilterlistDialog.setTitle("Name your filterlist");
        saveFilterlistDialog.setAlwaysOnTop(true);
        saveFilterlistDialog.setMinimumSize(new java.awt.Dimension(440, 100));
        saveFilterlistDialog.setResizable(false);

        filterlistNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterlistNameFieldActionPerformed(evt);
            }
        });

        filterlistSaveLabel1.setText("Name");

        confirmSaveButton.setText("Save");
        confirmSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmSaveButtonActionPerformed(evt);
            }
        });

        filterlistSaveLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        filterlistSaveLabel2.setText("If you already have a filter with this name, it'll be overwritten.");

        javax.swing.GroupLayout saveFilterlistDialogLayout = new javax.swing.GroupLayout(saveFilterlistDialog.getContentPane());
        saveFilterlistDialog.getContentPane().setLayout(saveFilterlistDialogLayout);
        saveFilterlistDialogLayout.setHorizontalGroup(
            saveFilterlistDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveFilterlistDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveFilterlistDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveFilterlistDialogLayout.createSequentialGroup()
                        .addComponent(filterlistSaveLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterlistNameField))
                    .addGroup(saveFilterlistDialogLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(filterlistSaveLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(confirmSaveButton)))
                .addContainerGap())
        );
        saveFilterlistDialogLayout.setVerticalGroup(
            saveFilterlistDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveFilterlistDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveFilterlistDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterlistNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterlistSaveLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveFilterlistDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmSaveButton)
                    .addComponent(filterlistSaveLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        importFileChooser.setAcceptAllFileFilterUsed(false);
        importFileChooser.setApproveButtonText("Import");
        importFileChooser.setApproveButtonToolTipText("");
        importFileChooser.setDialogTitle("Choose Filter-File");
        importFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                String a = lib.filterSuffix;
                return pathname.isDirectory() || pathname.getAbsolutePath().endsWith(a);
            }

            @Override
            public String getDescription() {
                String a = lib.filterSuffix;
                return "FileConverterFilterFile (" + a + ")";
            }
        });
        importFileChooser.setToolTipText("");
        importFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileChooserActionPerformed(evt);
            }
        });

        applyFileChooser.setAcceptAllFileFilterUsed(false);
        applyFileChooser.setApproveButtonText("Rename Recusive");
        applyFileChooser.setDialogTitle("Select Folder to Apply to");
        applyFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        infoDialog.setTitle("Information");
        infoDialog.setMinimumSize(new java.awt.Dimension(320, 180));
        infoDialog.setResizable(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Filename Converter");

        jLabel5.setText("Version 3.0b");

        jLabel6.setText("By Ren√© Vollmer ( www.Aypac.de )");

        jLabel8.setText("(C) 2010-2014");

        jButton6.setText("Check for Updates");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel7.setText("E-Mail: fnc@aypac.de");

        javax.swing.GroupLayout infoDialogLayout = new javax.swing.GroupLayout(infoDialog.getContentPane());
        infoDialog.getContentPane().setLayout(infoDialogLayout);
        infoDialogLayout.setHorizontalGroup(
            infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoDialogLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(infoDialogLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(infoDialogLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7))
                                    .addComponent(jLabel6)))
                            .addComponent(jLabel4))
                        .addGap(0, 86, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoDialogLayout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addContainerGap())
        );
        infoDialogLayout.setVerticalGroup(
            infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Filename Converter 3.0b");
        setMinimumSize(new java.awt.Dimension(320, 320));
        setPreferredSize(new java.awt.Dimension(320, 320));

        statusLabel.setText("Hello!");

        scrollPane.setViewportView(filterList);

        addButton.setText("Add Filter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        selectedFilterLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectedFilterLabel.setText("Selected Filter:");

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        upButton.setText("/\\");
            upButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    upButtonActionPerformed(evt);
                }
            });

            downButton.setText("\\/");
            downButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    downButtonActionPerformed(evt);
                }
            });

            startButton.setText("Apply");
            startButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    startButtonActionPerformed(evt);
                }
            });

            jButton4.setText("Simulate");
            jButton4.setToolTipText("Comes with the next version.");
            jButton4.setEnabled(false);
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });

            filtermanagerMenu.setText("Filtermanager");
            filtermanagerMenu.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    filtermanagerMenuMouseClicked(evt);
                }
            });
            filtermanagerMenu.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    filtermanagerMenuActionPerformed(evt);
                }
            });
            menuBar.add(filtermanagerMenu);

            helpMenu.setText("Help");
            helpMenu.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    helpMenuMouseClicked(evt);
                }
            });
            menuBar.add(helpMenu);

            informationMenu.setText("Info");
            informationMenu.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    informationMenuMouseClicked(evt);
                }
            });
            menuBar.add(informationMenu);

            updatesMenu.setText("Check for updates");
            updatesMenu.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    updatesMenuMouseClicked(evt);
                }
            });
            updatesMenu.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    updatesMenuActionPerformed(evt);
                }
            });
            menuBar.add(updatesMenu);

            setJMenuBar(menuBar);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(statusLabel)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectedFilterLabel)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(upButton)
                                .addGap(11, 11, 11)
                                .addComponent(downButton))
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPane)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(addButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(selectedFilterLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(upButton)
                                .addComponent(downButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                            .addComponent(jButton4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(startButton)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(statusLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            int selectedItem = this.getSelectedFilterIndex();
            Filter[] newFilter = new Filter[this.filters.length + 1];
            for (int i = 0; i < newFilter.length; i++) {
                if (i <= selectedItem) {
                    newFilter[i] = this.filters[i];
                } else if (i == selectedItem + 1) {
                    newFilter[i] = new Filter("default", "default", true, false);
                } else {
                    newFilter[i] = this.filters[(i - 1)];
                }
            }
            this.filters = newFilter;
            this.refreshFilterlist();
            this.filterList.setSelectedIndex(selectedItem + 1);
            this.openEditFilterDialog(selectedItem + 1);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println("method: submitActionPerformed:\n" + e);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed

        this.moveListItem(-1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        this.apply();
    }//GEN-LAST:event_startButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.closeEditFilterDialog();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.saveFilterChanges();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void caseSensitiveCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caseSensitiveCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caseSensitiveCheckboxActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        this.openEditFilterDialog(this.getSelectedFilterIndex());
    }//GEN-LAST:event_editButtonActionPerformed

    private void filterSettingsDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_filterSettingsDialogWindowClosed
        this.closeEditFilterDialog();
    }//GEN-LAST:event_filterSettingsDialogWindowClosed

    private void loadFilterlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFilterlistButtonActionPerformed
        this.loadFilterlist(this.getSelectedFilterlistIndex());
        filterManagerDialog.setVisible(false);
    }//GEN-LAST:event_loadFilterlistButtonActionPerformed

    private void filtermanagerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtermanagerMenuActionPerformed
        this.openFilterManagerDialog();
    }//GEN-LAST:event_filtermanagerMenuActionPerformed

    private void filtermanagerMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filtermanagerMenuMouseClicked
        this.openFilterManagerDialog();
    }//GEN-LAST:event_filtermanagerMenuMouseClicked

    private void filterlistNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterlistNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterlistNameFieldActionPerformed

    private void confirmSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmSaveButtonActionPerformed
        this.saveFilterlist(this.filterlistNameField.getText());

        this.saveFilterlistDialog.setVisible(false);
    }//GEN-LAST:event_confirmSaveButtonActionPerformed

    private void saveFilterlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFilterlistButtonActionPerformed
        this.openSaveFilterlistDialog();
    }//GEN-LAST:event_saveFilterlistButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.filterManagerDialog.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.deleteFilterlist(this.getSelectedFilterlistIndex());

        this.saveFilterlistDialog.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void exportFilterlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFilterlistButtonActionPerformed
        this.exportFilterFromLocal(this.getSelectedFilterlistIndex());
    }//GEN-LAST:event_exportFilterlistButtonActionPerformed

    private void importFilterlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFilterlistButtonActionPerformed
        this.openImportFileChooser();
    }//GEN-LAST:event_importFilterlistButtonActionPerformed

    private void importFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileChooserActionPerformed
        // TODO add your handling code here:
        System.out.print(evt.paramString());
    }//GEN-LAST:event_importFileChooserActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        this.moveListItem(1);
    }//GEN-LAST:event_downButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed

        try {
            int selectedItem = this.getSelectedFilterIndex();
            Filter[] newFilter = new Filter[this.filters.length - 1];
            for (int i = 0; i < newFilter.length; i++) {
                if (i < selectedItem) {
                    newFilter[i] = this.filters[i];
                } else {
                    newFilter[i] = this.filters[(i + 1)];
                }
            }
            this.filters = newFilter;
            this.refreshFilterlist();
            this.setSelectedFilterIndex(0);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void updatesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatesMenuActionPerformed
        this.openUpdatePage();
    }//GEN-LAST:event_updatesMenuActionPerformed

    private void updatesMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatesMenuMouseClicked
        this.openUpdatePage();
    }//GEN-LAST:event_updatesMenuMouseClicked

    private void helpMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMenuMouseClicked
        this.openWebPage(this.HELP_PAGE);
    }//GEN-LAST:event_helpMenuMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.openUpdatePage();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void informationMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_informationMenuMouseClicked
        this.infoDialog.setVisible(true);
    }//GEN-LAST:event_informationMenuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    private int getSelectedFilterIndex() {
        return this.filterList.getSelectedIndex();
    }

    private void refreshFilterlist() {
        this.filterList.setModel(lib.filterToModel(this.filters));
    }

    private void openEditFilterDialog(int selectedItemIndex) {
        Filter selectedItem = this.filters[selectedItemIndex];
        this.replaceField.setText(selectedItem.getReplace());
        this.byField.setText(selectedItem.getReplaceBy());
        this.caseSensitiveCheckbox.setSelected(selectedItem.isCaseSensitive());
        this.regexCheckbox.setSelected(selectedItem.isRegex());

        this.filterSettingsDialog.setVisible(true);
        this.filterList.setEnabled(false);
    }

    private void saveFilterChanges() {
        int selectedFilterIndex = this.getSelectedFilterIndex();
        Filter filter = this.filters[selectedFilterIndex];

        filter.edit(
                this.replaceField.getText(),
                this.byField.getText(),
                this.caseSensitiveCheckbox.isSelected(),
                this.regexCheckbox.isSelected()
        );

        this.closeEditFilterDialog();
    }

    private void closeEditFilterDialog() {
        this.refreshFilterlist();
        this.filterSettingsDialog.setVisible(false);
        this.filterList.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JFileChooser applyFileChooser;
    private javax.swing.JTextField byField;
    private javax.swing.JCheckBox caseSensitiveCheckbox;
    private javax.swing.JButton confirmSaveButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton exportFilterlistButton;
    private javax.swing.JList filterList;
    private javax.swing.JFrame filterManagerDialog;
    private javax.swing.JFrame filterSettingsDialog;
    private javax.swing.JList filterlistList;
    private javax.swing.JTextField filterlistNameField;
    private javax.swing.JLabel filterlistSaveLabel1;
    private javax.swing.JLabel filterlistSaveLabel2;
    private javax.swing.JMenu filtermanagerMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JFileChooser importFileChooser;
    private javax.swing.JButton importFilterlistButton;
    private javax.swing.JDialog infoDialog;
    private javax.swing.JMenu informationMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton loadFilterlistButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox regexCheckbox;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField replaceField;
    private javax.swing.JButton saveFilterlistButton;
    private javax.swing.JFrame saveFilterlistDialog;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JLabel selectedFilterLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton upButton;
    private javax.swing.JMenu updatesMenu;
    // End of variables declaration//GEN-END:variables

    void setStatus(String text, int status) {
        this.statusLabel.setText(text);
        this.progressBar.setValue(status);
    }

    void ready() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void openFilterManagerDialog() {
        this.refreshFilterlistList();
        filterManagerDialog.setVisible(true);

    }

    private int getSelectedFilterlistIndex() {
        return this.filterlistList.getSelectedIndex();
    }

    private String getFilterlistNameByIndex(int filterIndex) {
        return this.filterlistList.getModel().getElementAt(filterIndex).toString();
    }

    private void loadFilterlist(int filterIndex) {
        this.filters = lib.loadFilterLocal(this.getFilterlistNameByIndex(filterIndex));
        this.refreshFilterlist();
    }

    private void saveFilterlist(String text) {
        lib.saveFilterLocal(this.filters, text);
        this.refreshFilterlistList();
    }

    private void openSaveFilterlistDialog() {
        this.saveFilterlistDialog.setVisible(true);
    }

    private void refreshFilterlistList() {
        this.filterlistList.setModel(lib.loadFilterlist());
    }

    private void deleteFilterlist(int filterIndex) {
        lib.deleteFilterLocal(this.getFilterlistNameByIndex(filterIndex));
        this.refreshFilterlistList();
    }

    private void exportFilterFromLocal(int selectedFilterlistIndex) {
        lib.exportFilter(this.getFilterlistNameByIndex(selectedFilterlistIndex));
    }

    private void openImportFileChooser() {
        this.importFileChooser.setVisible(true);
        int returnVal = this.importFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            lib.importFilter(this.importFileChooser.getSelectedFile().getAbsolutePath());
        }
        this.refreshFilterlistList();
    }

    private void apply() {
        this.applyFileChooser.setVisible(true);
        int returnVal = this.applyFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            JTreeWalk walker = new JTreeWalk(this.applyFileChooser.getSelectedFile().getAbsolutePath(), this.filters, true);
            walker.run();
        }
        this.refreshFilterlistList();
    }

    private void setSelectedFilterIndex(int i) {
        this.filterlistList.setSelectedIndex(i);
    }

    private void moveListItem(int i) {
        int selectedItem = this.getSelectedFilterIndex();
        int changeWith = (selectedItem + i);
        if (changeWith >= 0) {
            try {
                Filter cache = this.filters[selectedItem];
                this.filters[selectedItem] = this.filters[changeWith];
                this.filters[changeWith] = cache;
                this.refreshFilterlist();
                this.setSelectedFilterIndex(changeWith);
            } catch (ArrayIndexOutOfBoundsException e) {
                System.err.println(e);
            }
        }
    }

    private void openUpdatePage() {
        this.openWebPage(this.CHECK_FOR_UPDATE_URL);
    }

    private void openWebPage(String url) {
        try {
            if (java.awt.Desktop.isDesktopSupported()) {
                java.net.URI urlp = java.net.URI.create(url);
                java.awt.Desktop.getDesktop().browse(urlp);
            } else {
                Process r = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
                r = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler javascript:location.href=' " + url + " ' ");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
